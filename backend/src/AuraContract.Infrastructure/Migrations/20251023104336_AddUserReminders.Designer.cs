// <auto-generated />
using System;
using AuraContract.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuraContract.Infrastructure.Migrations
{
    [DbContext(typeof(AuraDbContext))]
    [Migration("20251023104336_AddUserReminders")]
    partial class AddUserReminders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuraContract.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.CancellationLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("CancellationLetters");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CancellationNoticeDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostPerCycle")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomFields")
                        .HasColumnType("text");

                    b.Property<byte[]>("EncryptedData")
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextRenewalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PushToken")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReminderLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ReminderLevelId");

                    b.HasIndex("ScheduledFor");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.ReminderLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DaysBeforeDeadline")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ReminderLevels");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalSubscriptionId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentProvider")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CommonFields")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DefaultBillingCycle")
                        .HasColumnType("text");

                    b.Property<int?>("DefaultNoticePeriodDays")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EstimatedCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Provider");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dee783d-abcd-481d-a626-c4c709cfd624"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9480),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 12.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/netflix.com",
                            Provider = "Netflix",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9590)
                        },
                        new
                        {
                            Id = new Guid("2c4bc36c-bf77-4961-99fc-732395b1435b"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9710),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 8.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/disneyplus.com",
                            Provider = "Disney+",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9710)
                        },
                        new
                        {
                            Id = new Guid("4838b1d5-a68e-471b-9372-61bcece9ebb5"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9720),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 8.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/amazon.de",
                            Provider = "Amazon Prime Video",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9720)
                        },
                        new
                        {
                            Id = new Guid("4a164cca-fe69-4126-be77-3954f0ac13e4"),
                            Category = "Musik",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9720),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 10.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/spotify.com",
                            Provider = "Spotify",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9720)
                        },
                        new
                        {
                            Id = new Guid("3a3a9b17-2172-49fa-9a9b-948e4b86662c"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9730),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 11.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/youtube.com",
                            Provider = "YouTube Premium",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9730)
                        },
                        new
                        {
                            Id = new Guid("80279447-32d8-4dc4-bbb0-93db1d9195c2"),
                            Category = "Software",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9730),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 69.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/microsoft.com",
                            Provider = "Microsoft 365",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9730)
                        },
                        new
                        {
                            Id = new Guid("a5feba9d-3efb-4f74-a310-bee903f1c6d0"),
                            Category = "Software",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9740),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 59.49m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/adobe.com",
                            Provider = "Adobe Creative Cloud",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9740)
                        },
                        new
                        {
                            Id = new Guid("203e6352-8b96-4ebb-a1b4-ce203989ebec"),
                            Category = "Cloud-Speicher",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9740),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 11.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/dropbox.com",
                            Provider = "Dropbox",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9740)
                        },
                        new
                        {
                            Id = new Guid("4ca3c86f-f9f3-412a-936b-29cf983cd24e"),
                            Category = "Cloud-Speicher",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9750),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 9.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/google.com",
                            Provider = "Google One",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9750)
                        },
                        new
                        {
                            Id = new Guid("e379b6b5-6dd1-45fb-97d5-8e34441057f2"),
                            Category = "Mobilfunk",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9750),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 39.95m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/telekom.de",
                            Provider = "Telekom",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9750)
                        },
                        new
                        {
                            Id = new Guid("21d33732-dfbd-42f7-86dd-64cf4ca2558d"),
                            Category = "Mobilfunk",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9760),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 34.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/vodafone.de",
                            Provider = "Vodafone",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9760)
                        },
                        new
                        {
                            Id = new Guid("63421f3f-4009-41fa-9274-c32124113572"),
                            Category = "Mobilfunk",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9760),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 29.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/o2online.de",
                            Provider = "o2",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9760)
                        },
                        new
                        {
                            Id = new Guid("4217bb83-6722-43c5-9518-e02d5b62a693"),
                            Category = "Versicherung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9760),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 65.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/allianz.de",
                            Provider = "Allianz Haftpflichtversicherung",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9760)
                        },
                        new
                        {
                            Id = new Guid("99cf0bfa-21cd-438e-a7f6-2c025e601d29"),
                            Category = "Versicherung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9770),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 180.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/ergo.de",
                            Provider = "ERGO Rechtsschutzversicherung",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9770)
                        },
                        new
                        {
                            Id = new Guid("e3249ecb-49a1-4f4f-a660-06c0baecfc3c"),
                            Category = "Versicherung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9770),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 450.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/huk.de",
                            Provider = "HUK-COBURG KFZ-Versicherung",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9770)
                        },
                        new
                        {
                            Id = new Guid("89ff72e5-cab3-4ce3-b5fb-1be299ef34ee"),
                            Category = "Fitness",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9780),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 39.90m,
                            IsActive = true,
                            Provider = "Fitnessstudio",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9780)
                        },
                        new
                        {
                            Id = new Guid("f358fb52-c744-4ef5-a9f6-e102067a13ca"),
                            Category = "Fitness",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9780),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 79.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/urbansportsclub.com",
                            Provider = "Urban Sports Club",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9780)
                        },
                        new
                        {
                            Id = new Guid("1f748bd4-aa33-4e8f-bc99-13f12a6fcf9c"),
                            Category = "Energie",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9790),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 60,
                            EstimatedCost = 85.00m,
                            IsActive = true,
                            Provider = "Stromvertrag",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9790)
                        },
                        new
                        {
                            Id = new Guid("fbacf619-6965-4725-8c36-386b85203b5a"),
                            Category = "Energie",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9790),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 60,
                            EstimatedCost = 95.00m,
                            IsActive = true,
                            Provider = "Gasvertrag",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9790)
                        },
                        new
                        {
                            Id = new Guid("2e3aef2f-8353-4929-bccc-4d0033a8c1d4"),
                            Category = "Zeitschrift",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9790),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 19.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/spiegel.de",
                            Provider = "Der Spiegel Digital",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9790)
                        },
                        new
                        {
                            Id = new Guid("a578a173-7fc3-4272-aa18-8ee0bb44c276"),
                            Category = "Zeitschrift",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9810),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 24.90m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/faz.net",
                            Provider = "FAZ Digital",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9810)
                        },
                        new
                        {
                            Id = new Guid("027b0ca3-48cc-4e3f-a9c4-dc0f136d4c19"),
                            Category = "Gaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9810),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 59.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/playstation.com",
                            Provider = "PlayStation Plus",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9810)
                        },
                        new
                        {
                            Id = new Guid("3d393e71-5aa5-4bb7-a682-11a959ec9949"),
                            Category = "Gaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9810),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 12.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/xbox.com",
                            Provider = "Xbox Game Pass",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9810)
                        },
                        new
                        {
                            Id = new Guid("8598f2a6-5838-4f7a-abd2-4d1550879075"),
                            Category = "Bildung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9820),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 19.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/udemy.com",
                            Provider = "Udemy Pro",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9820)
                        },
                        new
                        {
                            Id = new Guid("8dac1a31-6659-452f-8cfa-704231ab7466"),
                            Category = "Bildung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9820),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 29.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/linkedin.com",
                            Provider = "LinkedIn Learning",
                            UpdatedAt = new DateTime(2025, 10, 23, 10, 43, 35, 768, DateTimeKind.Utc).AddTicks(9820)
                        });
                });

            modelBuilder.Entity("AuraContract.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionTier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.UserReminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("UserId");

                    b.ToTable("UserReminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.CancellationLetter", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.Contract", "Contract")
                        .WithMany("CancellationLetters")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Device", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Reminder", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.Contract", "Contract")
                        .WithMany("Reminders")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuraContract.Core.Entities.ReminderLevel", "ReminderLevel")
                        .WithMany("Reminders")
                        .HasForeignKey("ReminderLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ReminderLevel");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Subscription", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("AuraContract.Core.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.UserReminder", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithMany("UserReminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.Navigation("CancellationLetters");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.ReminderLevel", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.User", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Devices");

                    b.Navigation("Subscription");

                    b.Navigation("UserReminders");
                });
#pragma warning restore 612, 618
        }
    }
}
