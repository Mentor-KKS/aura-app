// <auto-generated />
using System;
using AuraContract.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuraContract.Infrastructure.Migrations
{
    [DbContext(typeof(AuraDbContext))]
    [Migration("20251022171109_AddContractType")]
    partial class AddContractType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuraContract.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.CancellationLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("CancellationLetters");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CancellationNoticeDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostPerCycle")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomFields")
                        .HasColumnType("text");

                    b.Property<byte[]>("EncryptedData")
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextRenewalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PushToken")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReminderLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ReminderLevelId");

                    b.HasIndex("ScheduledFor");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.ReminderLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DaysBeforeDeadline")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ReminderLevels");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalSubscriptionId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentProvider")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CommonFields")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DefaultBillingCycle")
                        .HasColumnType("text");

                    b.Property<int?>("DefaultNoticePeriodDays")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EstimatedCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Provider");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21ae6465-2b31-417f-a537-baa73ae772e4"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(330),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 12.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/netflix.com",
                            Provider = "Netflix",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(520)
                        },
                        new
                        {
                            Id = new Guid("bdf8a505-f6b8-4f11-86c7-70c78c7191af"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(740),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 8.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/disneyplus.com",
                            Provider = "Disney+",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(740)
                        },
                        new
                        {
                            Id = new Guid("e5493b64-41d8-47fc-9d74-8786c167afca"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(740),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 8.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/amazon.de",
                            Provider = "Amazon Prime Video",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(750)
                        },
                        new
                        {
                            Id = new Guid("6dca61d2-cc08-43d2-a4ca-62d993898759"),
                            Category = "Musik",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(750),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 10.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/spotify.com",
                            Provider = "Spotify",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(750)
                        },
                        new
                        {
                            Id = new Guid("3fe3f61f-cb0e-42da-bd7c-f46a1c140f4e"),
                            Category = "Streaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(760),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 11.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/youtube.com",
                            Provider = "YouTube Premium",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(760)
                        },
                        new
                        {
                            Id = new Guid("c7cbff54-a2ed-490b-9b47-fbfcbf876370"),
                            Category = "Software",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(770),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 69.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/microsoft.com",
                            Provider = "Microsoft 365",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(770)
                        },
                        new
                        {
                            Id = new Guid("874ad1ac-5442-40b4-94fe-d97c2b915add"),
                            Category = "Software",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(780),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 59.49m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/adobe.com",
                            Provider = "Adobe Creative Cloud",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(780)
                        },
                        new
                        {
                            Id = new Guid("88fcce3f-c0be-46c4-a0e3-fb222f22a0ef"),
                            Category = "Cloud-Speicher",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(790),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 11.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/dropbox.com",
                            Provider = "Dropbox",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(790)
                        },
                        new
                        {
                            Id = new Guid("e0456820-4bf1-459e-ace0-d3a697b4f627"),
                            Category = "Cloud-Speicher",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(800),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 9.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/google.com",
                            Provider = "Google One",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(800)
                        },
                        new
                        {
                            Id = new Guid("c81fd205-f580-4506-89c4-53abf7410452"),
                            Category = "Mobilfunk",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(810),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 39.95m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/telekom.de",
                            Provider = "Telekom",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(810)
                        },
                        new
                        {
                            Id = new Guid("c31a2d1e-2556-4a78-899f-4c1a91648f68"),
                            Category = "Mobilfunk",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(820),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 34.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/vodafone.de",
                            Provider = "Vodafone",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(820)
                        },
                        new
                        {
                            Id = new Guid("6ae1489c-abf5-4f07-a520-74670d7e4a64"),
                            Category = "Mobilfunk",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(820),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 29.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/o2online.de",
                            Provider = "o2",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(820)
                        },
                        new
                        {
                            Id = new Guid("e81cc989-0116-467d-ad41-3596352d1cc4"),
                            Category = "Versicherung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(830),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 65.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/allianz.de",
                            Provider = "Allianz Haftpflichtversicherung",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(830)
                        },
                        new
                        {
                            Id = new Guid("ea7f6527-e15a-4c0f-86db-570eab1dc659"),
                            Category = "Versicherung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(840),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 180.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/ergo.de",
                            Provider = "ERGO Rechtsschutzversicherung",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(840)
                        },
                        new
                        {
                            Id = new Guid("3bb8c1cd-8cc9-4728-acd0-8f6626a47f08"),
                            Category = "Versicherung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(850),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 450.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/huk.de",
                            Provider = "HUK-COBURG KFZ-Versicherung",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(850)
                        },
                        new
                        {
                            Id = new Guid("de7b0a9b-b9af-4943-a5f3-c95d78b850a9"),
                            Category = "Fitness",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(860),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 39.90m,
                            IsActive = true,
                            Provider = "Fitnessstudio",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(860)
                        },
                        new
                        {
                            Id = new Guid("12d0fe2c-a38c-4ccf-9842-a9b1e2fb06da"),
                            Category = "Fitness",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(860),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 79.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/urbansportsclub.com",
                            Provider = "Urban Sports Club",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(860)
                        },
                        new
                        {
                            Id = new Guid("79e9b1e7-6608-46c1-a9ee-aa98b266c2ef"),
                            Category = "Energie",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(870),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 60,
                            EstimatedCost = 85.00m,
                            IsActive = true,
                            Provider = "Stromvertrag",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(870)
                        },
                        new
                        {
                            Id = new Guid("7def1b62-af1f-49a7-8732-af8e13d7b12c"),
                            Category = "Energie",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(880),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 60,
                            EstimatedCost = 95.00m,
                            IsActive = true,
                            Provider = "Gasvertrag",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(880)
                        },
                        new
                        {
                            Id = new Guid("db5f262c-a786-4bf7-ad45-0c05c7603d24"),
                            Category = "Zeitschrift",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(890),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 19.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/spiegel.de",
                            Provider = "Der Spiegel Digital",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(890)
                        },
                        new
                        {
                            Id = new Guid("d1dc68a8-e69a-46cc-91db-ad6566bc1e7e"),
                            Category = "Zeitschrift",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(900),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 24.90m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/faz.net",
                            Provider = "FAZ Digital",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(900)
                        },
                        new
                        {
                            Id = new Guid("6b647669-cd9b-4965-91a5-f0b90fbb95bc"),
                            Category = "Gaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(900),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 59.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/playstation.com",
                            Provider = "PlayStation Plus",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(900)
                        },
                        new
                        {
                            Id = new Guid("8285b698-0604-4029-af56-031ec0564cc2"),
                            Category = "Gaming",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(910),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 12.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/xbox.com",
                            Provider = "Xbox Game Pass",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(910)
                        },
                        new
                        {
                            Id = new Guid("e31ae99a-be6b-42c9-8f64-b5f365203328"),
                            Category = "Bildung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(920),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 19.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/udemy.com",
                            Provider = "Udemy Pro",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(920)
                        },
                        new
                        {
                            Id = new Guid("8db79b4c-3989-488a-a53c-b131727b365f"),
                            Category = "Bildung",
                            ContractType = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(930),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 29.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/linkedin.com",
                            Provider = "LinkedIn Learning",
                            UpdatedAt = new DateTime(2025, 10, 22, 17, 11, 8, 705, DateTimeKind.Utc).AddTicks(930)
                        });
                });

            modelBuilder.Entity("AuraContract.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionTier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.CancellationLetter", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.Contract", "Contract")
                        .WithMany("CancellationLetters")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Device", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Reminder", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.Contract", "Contract")
                        .WithMany("Reminders")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuraContract.Core.Entities.ReminderLevel", "ReminderLevel")
                        .WithMany("Reminders")
                        .HasForeignKey("ReminderLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ReminderLevel");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Subscription", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("AuraContract.Core.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.Navigation("CancellationLetters");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.ReminderLevel", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.User", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Devices");

                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
