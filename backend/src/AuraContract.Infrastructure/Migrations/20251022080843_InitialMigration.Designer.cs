// <auto-generated />
using System;
using AuraContract.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuraContract.Infrastructure.Migrations
{
    [DbContext(typeof(AuraDbContext))]
    [Migration("20251022080843_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuraContract.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.CancellationLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("CancellationLetters");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CancellationNoticeDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("CostPerCycle")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomFields")
                        .HasColumnType("text");

                    b.Property<byte[]>("EncryptedData")
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextRenewalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PushToken")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReminderLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ReminderLevelId");

                    b.HasIndex("ScheduledFor");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.ReminderLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DaysBeforeDeadline")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ReminderLevels");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalSubscriptionId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentProvider")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CommonFields")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DefaultBillingCycle")
                        .HasColumnType("text");

                    b.Property<int?>("DefaultNoticePeriodDays")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EstimatedCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Provider");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16287084-f814-4dda-a421-5aa02b03f6fc"),
                            Category = "Streaming",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(4800),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 12.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/netflix.com",
                            Provider = "Netflix",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(4930)
                        },
                        new
                        {
                            Id = new Guid("b4265acb-b2e1-425b-bcc1-f8b460bf99bc"),
                            Category = "Streaming",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5080),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 8.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/disneyplus.com",
                            Provider = "Disney+",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5080)
                        },
                        new
                        {
                            Id = new Guid("2c9dc44a-0980-4f16-a42e-c411120a120a"),
                            Category = "Streaming",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5090),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 8.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/amazon.de",
                            Provider = "Amazon Prime Video",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("db16a1d7-f7f0-4e3a-9c8a-4d83da276fc2"),
                            Category = "Musik",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5090),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 10.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/spotify.com",
                            Provider = "Spotify",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("85c86161-bc76-4611-ad80-94b4f66f927e"),
                            Category = "Streaming",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5100),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 11.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/youtube.com",
                            Provider = "YouTube Premium",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5100)
                        },
                        new
                        {
                            Id = new Guid("5545dc81-cae9-4ce5-9f44-3ad70cfa2443"),
                            Category = "Software",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5110),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 69.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/microsoft.com",
                            Provider = "Microsoft 365",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5110)
                        },
                        new
                        {
                            Id = new Guid("0e1da498-6f33-4349-85a1-e232672ed749"),
                            Category = "Software",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5110),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 59.49m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/adobe.com",
                            Provider = "Adobe Creative Cloud",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5110)
                        },
                        new
                        {
                            Id = new Guid("b03e99aa-19f0-4c6e-9cc2-45f83e82b65d"),
                            Category = "Cloud-Speicher",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5120),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 11.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/dropbox.com",
                            Provider = "Dropbox",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5120)
                        },
                        new
                        {
                            Id = new Guid("693fb5f8-98eb-46fe-bc51-a4b575ae1a2c"),
                            Category = "Cloud-Speicher",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5120),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 9.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/google.com",
                            Provider = "Google One",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5120)
                        },
                        new
                        {
                            Id = new Guid("2d97d58e-63b1-45de-95e7-587654c9597d"),
                            Category = "Mobilfunk",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5130),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 39.95m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/telekom.de",
                            Provider = "Telekom",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5130)
                        },
                        new
                        {
                            Id = new Guid("2bc213cd-0baa-4bf0-af0e-955dc6fa8d13"),
                            Category = "Mobilfunk",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5130),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 34.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/vodafone.de",
                            Provider = "Vodafone",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5130)
                        },
                        new
                        {
                            Id = new Guid("7917d67c-b2cd-4401-a7f3-09313072f14d"),
                            Category = "Mobilfunk",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5140),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 29.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/o2online.de",
                            Provider = "o2",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5140)
                        },
                        new
                        {
                            Id = new Guid("7b38e0bb-69ed-461e-ad1b-f442ce5dd5ff"),
                            Category = "Versicherung",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5140),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 65.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/allianz.de",
                            Provider = "Allianz Haftpflichtversicherung",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5140)
                        },
                        new
                        {
                            Id = new Guid("3df8927e-6b9c-4305-9d22-d688346ceaad"),
                            Category = "Versicherung",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5150),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 180.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/ergo.de",
                            Provider = "ERGO Rechtsschutzversicherung",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5150)
                        },
                        new
                        {
                            Id = new Guid("df7782a5-8eb4-4a11-8eb1-6aeb23b7d7ef"),
                            Category = "Versicherung",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5150),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 450.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/huk.de",
                            Provider = "HUK-COBURG KFZ-Versicherung",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5150)
                        },
                        new
                        {
                            Id = new Guid("c2c7f3c0-4791-443c-9366-577285cd9a5f"),
                            Category = "Fitness",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5160),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 90,
                            EstimatedCost = 39.90m,
                            IsActive = true,
                            Provider = "Fitnessstudio",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5160)
                        },
                        new
                        {
                            Id = new Guid("333678c3-c1f4-431e-8a64-beffc2b4571f"),
                            Category = "Fitness",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5160),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 79.00m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/urbansportsclub.com",
                            Provider = "Urban Sports Club",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5160)
                        },
                        new
                        {
                            Id = new Guid("de6ee918-c6d5-4140-9aa1-049a4322fba5"),
                            Category = "Energie",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5170),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 60,
                            EstimatedCost = 85.00m,
                            IsActive = true,
                            Provider = "Stromvertrag",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5170)
                        },
                        new
                        {
                            Id = new Guid("3ad29b4b-59dd-4e08-abb9-c45d28eb1c8c"),
                            Category = "Energie",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5170),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 60,
                            EstimatedCost = 95.00m,
                            IsActive = true,
                            Provider = "Gasvertrag",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5170)
                        },
                        new
                        {
                            Id = new Guid("b1213fcb-8954-4a51-b8be-d2dd663c0608"),
                            Category = "Zeitschrift",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5180),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 19.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/spiegel.de",
                            Provider = "Der Spiegel Digital",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5180)
                        },
                        new
                        {
                            Id = new Guid("a5a72f5a-7e12-4586-8c70-afa517e929d2"),
                            Category = "Zeitschrift",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5180),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 24.90m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/faz.net",
                            Provider = "FAZ Digital",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5180)
                        },
                        new
                        {
                            Id = new Guid("4bce8a3b-414f-48ff-867f-085592d2d46d"),
                            Category = "Gaming",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5180),
                            DefaultBillingCycle = "yearly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 59.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/playstation.com",
                            Provider = "PlayStation Plus",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5190)
                        },
                        new
                        {
                            Id = new Guid("6e5167d3-e7c2-4062-ab02-71f85de70f78"),
                            Category = "Gaming",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5200),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 12.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/xbox.com",
                            Provider = "Xbox Game Pass",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5200)
                        },
                        new
                        {
                            Id = new Guid("dbb45041-8639-40e7-980a-07852c31dfee"),
                            Category = "Bildung",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5200),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 19.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/udemy.com",
                            Provider = "Udemy Pro",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5200)
                        },
                        new
                        {
                            Id = new Guid("f37f4478-47bf-4a43-a1b5-a2a136119a79"),
                            Category = "Bildung",
                            CreatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5210),
                            DefaultBillingCycle = "monthly",
                            DefaultNoticePeriodDays = 30,
                            EstimatedCost = 29.99m,
                            IsActive = true,
                            LogoUrl = "https://logo.clearbit.com/linkedin.com",
                            Provider = "LinkedIn Learning",
                            UpdatedAt = new DateTime(2025, 10, 22, 8, 8, 43, 647, DateTimeKind.Utc).AddTicks(5210)
                        });
                });

            modelBuilder.Entity("AuraContract.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionTier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.CancellationLetter", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.Contract", "Contract")
                        .WithMany("CancellationLetters")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Device", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Reminder", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.Contract", "Contract")
                        .WithMany("Reminders")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuraContract.Core.Entities.ReminderLevel", "ReminderLevel")
                        .WithMany("Reminders")
                        .HasForeignKey("ReminderLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ReminderLevel");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Subscription", b =>
                {
                    b.HasOne("AuraContract.Core.Entities.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("AuraContract.Core.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.Contract", b =>
                {
                    b.Navigation("CancellationLetters");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.ReminderLevel", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("AuraContract.Core.Entities.User", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Devices");

                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
